# This is the docker-compose.yml file for the FastAPI app.
# location: ./docker-compose.yml
services:
  # ───────────────────────────
  # FastAPI app
  app:
    container_name: fast-api-langgraph-fastmcp-app-1
    build:
      context: .
      args:
        APP_ENV: ${APP_ENV:-development}
        POSTGRES_URL: ${POSTGRES_URL}
        JWT_SECRET_KEY: ${JWT_SECRET_KEY}
        LLM_API_KEY: ${LLM_API_KEY}
        OPENAI_API_KEY: ${OPENAI_API_KEY}
    depends_on:
      - db                                    # wait for Postgres
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    env_file:
      - .env.${APP_ENV:-development}          # e.g. .env.development
    environment:
      - APP_ENV=${APP_ENV:-development}
      - LLM_API_KEY=${LLM_API_KEY:-dummy-key-for-development}
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY:-}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY:-}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-supersecretkeythatshouldbechangedforproduction}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: on-failure
    networks:
      - monitoring

  # ───────────────────────────
  # PostgreSQL database
  db:
    image: postgres:16                     # use latest 16.x
    container_name: langgraph_db
    restart: always
    ports:
      - "55432:5432"                       # host:container (for local psql)
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpw
      POSTGRES_DB: fastapi-langgraph-mcp-dev
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - monitoring

  # ───────────────────────────
  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    restart: always
    ports:
      - "9190:9090"                        # host:container
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - monitoring

  # ───────────────────────────
  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    restart: always
    ports:
      - "3300:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge

volumes:
  db-data:
  grafana-storage:
